digraph {
  decision1 [label="Is your input\na recursive type?"];
  decision1_1 [label="Is your output\na recursive type?"];
  decision1_2 [label="Is your output\na recursive type?"];
  decision1_2_yes [label="Yes"];
  decision1_2_no [label="No"];
  decision1_1_no [label="No"];
  choose_either [label="I feel lucky!"];
  start_folds [label="Use a fold!"];
  start_unfolds [label="Use an unfold!"];
  start_refolds [label="Use a refold!"];
  decision0, decision1, decision1_1, decision1_2, expert_decision1, fold1,fold2,fold3,fold4,unfold1,unfold2,unfold3 [shape=diamond];
  fold1 [label="Do you only combine results\nfrom recursive calls?"];
  fold2 [label="Only from\nimmediate children?"];
  fold3 [label="Only that and examine\nthe original subtrees?"];
  fold4 [label="What do you do to\neach subtree?"];
  gcata [label="Write your own\nrecursion scheme\n(using gcata)!"];
  cata [label="Use cata!"];
  histo [label="Use histo!"];
  zygo [label="Use zygo!"];
  para [label="Use para!"];
  unfold1 [label="Do you only generate subtrees\nby making recursive calls?"]
  unfold2 [label="Do you only generate\n1 layer at a time?"]
  unfold3 [label="Only that and by returning\npre-built subtrees?"]
  ana [label="Use ana!"];
  apo [label="Use apo!"];
  futu [label="Use futu!"];
  gana [label="Write your own\nrecursion scheme\n(using gana)!"];
  decision0 [label="Do you know which shape your\nfunction's recursion will have?"];
  expert_decision1 [label="What is the shape?"];
  same_as_input_type[label="Same as input type"];
  same_as_output_type[label="Same as output type"];
  neither[label="Neither"];
  decision1_2_yes, decision1_2_no, decision1_1_no, same_as_input_type, same_as_output_type, neither [color=invis];

  start -> decision0;
  decision0 -> decision1 [label=no];
  decision0 -> expert_decision1 [label=yes];
  decision1_1 -> decision1_1_no [dir=none];
  decision1_2 -> decision1_2_yes [dir=none];
  decision1_2 -> decision1_2_no [dir=none];

  decision1_1_no -> start_folds [minlen=2];
  decision1_2_yes -> start_unfolds [minlen=2];
  decision1_2_no -> start_refolds [minlen=2];

  subgraph cluster_beginner {
    color=invis;
    decision1 -> decision1_1 [label=yes];
    decision1 -> decision1_2 [label=no];
    decision1_1 -> choose_either [label=yes];
    decision1_1_no;
    decision1_2_yes;
    decision1_2_no;
  }

  subgraph cluster_expert {
    color=invis;
    expert_decision1;
    same_as_input_type;
    same_as_output_type;
    neither;
  }

  expert_decision1 -> same_as_input_type [dir=none];
  same_as_input_type -> start_folds [minlen=2];
  expert_decision1 -> same_as_output_type [dir=none];
  same_as_output_type -> start_unfolds [minlen=2];
  expert_decision1 -> neither [dir=none];
  neither -> start_refolds [minlen=2];

  choose_either -> start_folds;
  choose_either -> start_unfolds;
  choose_either -> start_refolds [style=invis];

  start_folds -> fold1;
  fold1 -> fold2 [label="yes"]
  fold1 -> fold3 [label="no"]
  fold2 -> cata [label="yes"];
  fold2 -> histo [label="no"];
  fold3 -> fold4 [label="yes"];
  fold3 -> gcata [label="no"];
  fold4 -> zygo [label="Apply cata"];
  fold4 -> para [label="Something else"];

  start_unfolds -> unfold1;
  unfold1 -> unfold2 [label="yes"];
  unfold1 -> unfold3 [label="no"];
  unfold2 -> ana [label="yes"];
  unfold2 -> futu [label="no"];
  unfold3 -> apo [label="yes"];
  unfold3 -> gana [label="no"];
}
